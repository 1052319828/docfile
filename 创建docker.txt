创建用户
useradd docker
设置密码
passwd docker
创建目录
sudo mkdir /home/docker
更新库
sudo apt-get update
安装所有必须和可选的包
sudo apt-get install linux-image-generic-lts-trusty
重启系统
sudo reboot
查看你是否安装了wget
which wget
如果wget没有安装，先升级包管理器，然后再安装它。
$ sudo apt-get update $ sudo apt-get install wget
获取最新版本的 Docker 安装包
wget -qO- https://get.docker.com/ | sh
系统会提示你输入sudo密码，输入完成之后，就会下载脚本并且安装Docker及依赖包。
验证 Docker 是否被正确的安装
sudo docker run hello-world



docker常用命令
docker images 查看镜像
docker ps 查看容器
docker ps -a 查看所有容器，包括没有运行的
docker rm 删除容器
docker rmi 删除镜像
docker build 新建镜像
docker run 运行容器
docker stop 停止容器
docker logs 查看日志
docker load 导入镜像
docker save 导出镜像
docker commit 容器生成镜像
docker restart 容器重启

pull 镜像

执行镜像  docker run -i -t -v /root/software/:/mnt/software/ 25c5298b1a36 /bin/bash 

生成容器：docker commit 57c312bbaad1 javaweb:0.1
						容器id   生成 镜像名 tag

执行容器：docker run -d -p 8081:8080 --name javaweb javaweb:0.1 /root/run.sh
-d：表示以“守护模式”执行/root/run.sh脚本，此时 Tomcat 控制台不会出现在输出终端上。
-p：表示宿主机与容器的端口映射，此时将容器内部的 8080 端口映射为宿主机的 58080 端口，这样就向外界暴露了 58080 端口，可通过 Docker 网桥来访问容器内部的 8080 端口了。
--name：表示容器名称，用一个有意义的名称命名即可。
关于 Docker 网桥的内容，需要补充说明一下。实际上 Docker 在宿主机与容器之间，搭建了一座网络通信的桥梁，我们可通过宿主机 IP 地址与端口号来映射容器内部的 IP 地址与端口号，

用一行命令大扫除：
docker kill $(docker ps -q) ; 
docker rm $(docker ps -a -q) ; 
docker rmi $(docker images -q -a)

运行tomcat 容器后
# docker exec -t -i dev_tomcat /bin/bash
// docker exec意思是：在dev_tomcat下面运行一个命令，在这里，运行的是/bin/bash
// -t 表示分配一个pseudo-TTY，-i 表示可交互
// 运行之后，提示符就变成了，tomcat这个image的默认工作目录是/usr/local/tomcat，自动打开：
root@94e167c8b2b8:/usr/local/tomcat#
root@94e167c8b2b8:/usr/local/tomcat# cd webapps/
// 进入webapps里面，看看是不是几个默认的应用都在里面
root@94e167c8b2b8:/usr/local/tomcat/webapps# ls
ROOT  docs  examples  host-manager  manager

tomcat 设置登陆密码  进入conf/tomcat-users.xml
<role rolename="manager-gui"/>
<user username="tomcat" password="s3cret" roles="manager-gui"/>

上传失败 设置上传大小
/opt/tomcat/webapps/manager/WEB-INF

单点登陆前keystore生成
这里需要使用JDK安装包下的keytool工具生成证书文件keystore，以命令方式换到目录%TOMCAT_HOME%,在command命令行输入如下命令： 
keytool -genkey -alias tomcat_key -keyalg RSA -storepass changeit -keystore server.keystore -validity 36500
此时会提示用户输入姓名，组织等信息，如下所示，只输入localhost作为name，其余回车即可
这样就会在当前路径下生成一个名为server.keystore的证书文件，这个文件会在后面tomcat的server.xml配置文件中用到。
简单解释下这个命令的含义：
-genkey 生成证书指令
 -alias 证书的别名为tomcat_key 
-keyalg 生成证书的算法是RSA 
-storepass 证书的密码changeit 
-keystore 生成的证书文件是server.keystore 这里也可以指定具体的路径，如在Mac下：~/Document表示用户目录下的Document文件夹下
-validity 36500 证书的有效期，单位是天，这里指定的是100年


在Tomcat的server.xml配置文件中进行如下配置：
<Connector SSLEnabled="true" clientAuth="false"   
           maxThreads="150" port="8443"   
           protocol="org.apache.coyote.http11.Http11NioProtocol"   
           scheme="https" secure="true" sslProtocol="TLS"  
           keystoreFile="/Users/cruise/Documents/ISG/apache-tomcat-8.0.32/server.keystore"   
           keystorePass="changeit" /> 

这里的keystoreFile需要指定上一步生成的证书文件，keystorePass对应生成文件的时候设置的密码。





# tar xvzf libsodium-1.0.1.tar.gz
# cd libsodium-1.0.1
# ./autogen.sh
# ./configure --prefix=/usr/local 
# make --jobs=`grep processor /proc/cpuinfo | wc -l`
# make install

docker run -it --name=app -p 8083:8000 -v /code:/usr/src/app --link=redis:db django bash

本云管平台部署docker
docker build -t (name) 
./run.sh
./exec.sh
docker exec -it ecs_name bash









yum -y update  
sudo yum makecache fast  






Centos 7 网络配置

Centos 7开始使用ip命令替换了以前的ifconfig

 

ip  [选项]  操作对象{link|addr|route...}

# ip link show                # 显示网络接口信息
# ip link set eth0 upi           # 开启网卡
# ip link set eth0 down          # 关闭网卡
# ip link set eth0 promisc on      # 开启网卡的混合模式
# ip link set eth0 promisc offi     # 关闭网卡的混个模式
# ip link set eth0 txqueuelen 1200   # 设置网卡队列长度
# ip link set eth0 mtu 1400        # 设置网卡最大传输单元
# ip addr show                # 显示网卡IP信息
# ip addr add 192.168.0.1/24 dev eth0 # 设置eth0网卡IP地址192.168.0.1
# ip addr del 192.168.0.1/24 dev eth0 # 删除eth0网卡IP地址

# ip route list                 # 查看路由信息
# ip route add 192.168.4.0/24  via  192.168.0.254 dev eth0 # 设置192.168.4.0网段的网关为192.168.0.254,数据走eth0接口
# ip route add default via  192.168.0.254  dev eth0    # 设置默认网关为192.168.0.254
# ip route del 192.168.4.0/24      # 删除192.168.4.0网段的网关
# ip route del default          # 删除默认路由

 

开启自动获取

首先查看自己的网卡信息

ip addr show

 

1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: eno16777736: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 00:0c:29:c9:9b:0b brd ff:ff:ff:ff:ff:ff


可查看到网卡名称为eno16777736

进入network-scripts

[root@localhost ~]# cd /etc/sysconfig/network-scripts
[root@localhost network-scripts]# ls
ifcfg-eno16777736  ifdown-eth   ifdown-isdn    ifdown-sit       ifup          ifup-ib    ifup-plip   ifup-routes    ifup-tunnel        network-functions-ipv6
ifcfg-lo           ifdown-ib    ifdown-post    ifdown-Team      ifup-aliases  ifup-ippp  ifup-plusb  ifup-sit       ifup-wireless
ifdown             ifdown-ippp  ifdown-ppp     ifdown-TeamPort  ifup-bnep     ifup-ipv6  ifup-post   ifup-Team      init.ipv6-global
ifdown-bnep        ifdown-ipv6  ifdown-routes  ifdown-tunnel    ifup-eth      ifup-isdn  ifup-ppp    ifup-TeamPort  network-functions
[root@localhost network-scripts]#


可以查看到我们相应网卡的配置文件为ifcfg-eno16777736

使用vi ifcfg-eno16777736

进入编辑

TYPE=Ethernet
BOOTPROTO=dhcp
DEFROUTE=yes
PEERDNS=yes
PEERROUTES=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_PEERDNS=yes
IPV6_PEERROUTES=yes
IPV6_FAILURE_FATAL=no
NAME=eno16777736
UUID=5b96b479-11f3-4aec-b984-129de5721e7b
DEVICE=eno16777736
ONBOOT=no


将ONBOOT=no修改为ONBOOT=yes并保存退出重启

重启后再次使用ip addr show可查看到

1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: eno16777736: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 00:0c:29:c9:9b:0b brd ff:ff:ff:ff:ff:ff
    inet 192.168.133.133/24 brd 192.168.133.255 scope global dynamic eno16777736
       valid_lft 1252sec preferred_lft 1252sec
    inet6 fe80::20c:29ff:fec9:9b0b/64 scope link
       valid_lft forever preferred_lft forever

我们网卡已经自动获取到ip了

手工设置IP地址：

 

TYPE=Ethernet
#BOOTPROTO=dhcp
DEFROUTE=yes
PEERDNS=yes
PEERROUTES=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_PEERDNS=yes
IPV6_PEERROUTES=yes
IPV6_FAILURE_FATAL=no
NAME=eno16777736
UUID=5b96b479-11f3-4aec-b984-129de5721e7b
DEVICE=eno16777736
ONBOOT=yes
IPADDR0=192.168.133.130
PREFIX0=24
GETWAY0=192.168.133.2
DNS1=192.68.133.2
DNS2=218.85.152.99


通过上面配置。我们为系统指定ip 子网掩码 网关以及DNS地址。

[root@localhost ~]# ip addr show
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
2: eno16777736: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 00:0c:29:c9:9b:0b brd ff:ff:ff:ff:ff:ff
    inet 192.168.133.130/24 brd 192.168.133.255 scope global eno16777736
       valid_lft forever preferred_lft forever
    inet6 fe80::20c:29ff:fec9:9b0b/64 scope link
       valid_lft forever preferred_lft forever

习惯使用ifconfig的可以实现联网后通过yum install net-tools安装net-tools组件使用ifconfig。

 